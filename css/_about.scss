@use 'sass:color';

// Breathe-like animation for floating text
@keyframes breathe {
  0% {
    transform: translateY(0) scale(1);
  }

  100% {
    transform: translateY(25px) scale(1.05);
  }
}

@mixin fancy-breathing-header {
  position: absolute;
  font-size: 3.75rem;
  line-height: 1;
  top: -2rem;
  left: 1rem;

  // background-image: linear-gradient(
  //   to bottom,
  //   hsla(346, 100%, 63%, 0.5) 0%,
  //   hsla(346, 100%, 63%, 0.1) 70%,
  //   hsla(346, 100%, 63%, 0)
  // );
  background-image: linear-gradient(
    to bottom,
    transparentize($color-primary, 0.5) 0%,
    transparentize($color-primary, 0.9) 70%
  );

  // color.adjust($color-primary, $alpha: 0)
  background-size: 100%;
  background-repeat: repeat;

  /* Use the text as a mask for the background. */
  /* This will show the gradient as a text color rather than element bg. */
  background-clip: text;
  -webkit-background-clip: text;
  -moz-background-clip: text;
  -webkit-text-fill-color: transparent;
  -moz-text-fill-color: transparent;
  transform-origin: left;
  animation: breathe 4s infinite ease-in-out alternate;

  @include breakpoint(md) {
    font-size: 10rem;
    top: -5rem;
  }
}

// $r: clamp(4em, 20vw, 15em);
$r: clamp(4em, 10vw, 7.5em);

.center {
  // We don't want user to highlight my avatar and see the goofy clip shape
  user-select: none;

  // TODO: Do I want my avatar bottom-aligned with the body?
  // align-self: flex-end;
}

figure {
  --hov: 0;
  --not-hov: calc(1 - var(--hov));
  display: grid;
  place-self: center;
  margin: 0;
  // Need room for image to expand up top
  padding-top: 20%;
  transform: scale(calc(1 - 0.1 * var(--not-hov)));
  overflow: hidden;
  border-radius: 0 0 $r $r;

  &,
  img {
    transition: transform 0.2s ease-in-out;
    filter: drop-shadow(0 5px 10px rgba(0, 0, 0, 0.5));
  }

  &::before,
  img {
    grid-area: 1 / 1;
    place-self: end center;
  }

  &::before {
    content: '';
    padding: $r;
    border-radius: $circle;
    background-color: $color-primary;
  }

  &:hover {
    --hov: 1;
  }

  img {
    width: calc(2 *#{$r});
    border-radius: $r;
    // transform: translatey(calc((1 - var(--hov)) * 10%))
    //   scale(calc(1.25 + 0.05 * var(--hov)));
    transform: translateY(calc((0.5 - var(--hov)) * 10%)) scale(calc(1.25 + 0.05 * var(--hov)));
  }
}

.about {
  // Removing section paddings
  padding: 0;
  margin: 0 auto;
  max-width: unset;
  @include breakpoint(md) {
    padding: 0;
  }
  position: relative;

  margin-top: 4rem;

  &__header {
    // We don't want this huge floating heading to block input or receive highlighting
    user-select: none;
    pointer-events: none;
    margin-bottom: $margin-desktop;
    @include fancy-breathing-header;
  }

  &__introduction {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    // TODO: Which justify-content looks best?
    justify-content: space-between;
    gap: $margin-mobile;

    @include breakpoint(md) {
      flex-direction: row;
      gap: 2rem;
    }

    &__avatar {
      max-width: 250px;
      max-height: 250px;
      align-self: center;
      background-color: $color-primary;
      border-radius: $circle;
      // overflow: hidden;

      img {
        position: relative;
        top: -100px;
        left: 5px;
        border-radius: $circle;
      }
    }

    .about__body {
      flex-grow: 1;
      flex-basis: 80%;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      justify-content: space-between;
      // background-color: color.scale($color-primary-dark, $lightness: -20%);
      // border: 3px solid $color-primary;
      // box-shadow: 0 5px 10px rgba(0, 0, 0, 0.4);
      font-size: $font-size-body * 0.8;
      text-align: justify;
      padding: 0.5rem;
      border-radius: $rounded;

      @include breakpoint(md) {
        font-size: $font-size-body;
        align-self: stretch;
        padding: 2rem;
        max-width: 75ch;
        gap: 3rem;
      }
    }

    .about__biography {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
  }

  button {
    font-size: $font-size-body * 0.8;
    align-self: center;

    @include breakpoint(md) {
      font-size: $font-size-body;
      align-self: flex-start;
    }
  }

  &__traits {
    // TODO: This is nice and elegant, but there's a small period where the traits are stacked with 3 on top and 1 on bottom
    // -- which is rather ugly! Maybe I'll just hard-code a 1 column mobile layout, 2 on tablets, and 4 on desktop
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    row-gap: 0.5rem;
    column-gap: 1rem;
    justify-content: space-between;
    background-color: color.scale($color-primary-dark, $lightness: -20%);
    background-color: #f8fafc;
    background-color: $color-primary;
    border-block: 1px solid $color-primary;
    box-shadow: 0 10px 5px rgba(0, 0, 0, 0.2);

    margin-block: 0rem 4rem;

    @include breakpoint(md) {
      column-gap: 4rem;
      row-gap: 2rem;
    }
  }

  .trait {
    text-align: center;
    padding: 0.5rem 1rem;
  }

  // TODO: Doesn't actually exist! Do I want icons for this component?
  .trait__image {
  }

  .trait__header {
    color: color.scale($color-white, $lightness: -20%);
    font-size: $font-size-body * 0.85;
    font-weight: $font-weight-heading;

    // TODO:
    color: #171717;
    color: #fafafa;
    color: var(--clr-text);

    @include breakpoint(xl) {
      font-size: $font-size-subheading * 0.75;
    }
  }

  .trait__body {
    color: color.scale($color-white, $lightness: -25%);
    font-size: $font-size-body * 0.6;
    color: #262626;
    color: #f5f5f5;
    color: var(--clr-text);

    font-weight: 500;

    @include breakpoint(xl) {
      font-size: $font-size-body * 0.75;
    }
  }
}

// TODO: Testing infinite scrolling trait section
.highway-slider {
  display: flex;
  justify-content: center;
  width: 100%;
  // height: 150px;

  position: relative;

  &::before {
    content: ' ';
    position: absolute;
    z-index: 9;
    inset: 0;

    // background: linear-gradient(
    //   to right,
    //   rgba($color-primary-dark, 1) 0%,
    //   rgba($color-primary-dark, 0) 15%,
    //   rgba($color-primary-dark, 0) 85%,
    //   rgba($color-primary-dark, 0.8) 90%,
    //   rgba($color-primary-dark, 1) 100%
    // );

    background: linear-gradient(
      to right,
      rgba(var(--clr-text), 1) 0%,
      rgba(var(--clr-text), 0) 15%,
      rgba(var(--clr-text), 0) 85%,
      rgba(var(--clr-text), 0.8) 90%,
      rgba(var(--clr-text), 1) 100%
    );
  }
}

.highway-barrier {
  width: 100%;
  overflow: hidden;
  position: relative;
}

.highway-lane {
  display: flex;
  height: 100%;
}

.highway-car {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes translateInfinite {
  100% {
    transform: translateX(calc(-300px * 6));
  }
}

#infinite .highway-barrier {
  box-shadow: 0 3px 10px -3px rgba(0, 0, 0, 0.3);

  &::before,
  &::after {
    content: ' ';
    position: absolute;
    z-index: 9;
    width: 300px;
    height: 100%;
  }

  .highway-lane {
    // Size * (2x amount of cars)
    width: calc(300px * 12);

    .highway-car {
      width: 300px;
      animation: translateInfinite 20s linear infinite;
    }
  }
}

.highway-slider:hover .highway-car {
  animation-play-state: paused !important;
}
// END-TODO
